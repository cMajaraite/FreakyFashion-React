import express from "express";
import Database from "better-sqlite3";
import path from "path";
import cors from "cors";
import fs from "fs";
import multer from "multer";

// HÃ¤mta nuvarande arbetskatalog (fÃ¶r att hantera filvÃ¤gar)
const __dirname = process.cwd();
const port = 8000;
const app = express();

// CORS-konfiguration fÃ¶r att tillÃ¥ta requests frÃ¥n frontend
app.use(
  cors({
    origin: "http://localhost:3000",
    credentials: true,
  })
);

// GÃ¶r bilder i public-mappen tillgÃ¤ngliga
app.use(express.static("public"));

// Middleware fÃ¶r att hantera JSON-data
app.use(express.json());

const dbPath = "./db/freakyfashion.db";

// Initiera databasen med relationsdatabas
function setupDb() {
  const db = new Database(dbPath, { verbose: console.log });

  // STEG 1: Skapa categories-tabellen FÃ–RST (master table)
  db.exec(`
    CREATE TABLE IF NOT EXISTS categories (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      image TEXT
    )
  `);

  // STEG 2: Skapa products-tabellen med FOREIGN KEY (din struktur)
  db.exec(`
    CREATE TABLE IF NOT EXISTS products (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      price TEXT NOT NULL,
      brand TEXT NOT NULL,
      image TEXT,
      isNew INTEGER DEFAULT 0,
      slug TEXT,
      description TEXT,
      sku TEXT NOT NULL UNIQUE,
      isFavorite INTEGER DEFAULT 0,
      category_id INTEGER,
      FOREIGN KEY (category_id) REFERENCES categories (id)
    )
  `);

    // Spot-texts (oberoende tabell)
  db.exec(`
    CREATE TABLE IF NOT EXISTS spot_texts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      spot_key TEXT NOT NULL UNIQUE,
      display_text TEXT NOT NULL,
      created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
      updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )
  `);

  // STEG 3: LÃ¤gg till grundkategorier om tabellen Ã¤r tom
  const categoryCount = db
    .prepare("SELECT COUNT(*) as count FROM categories")
    .get();
  if (categoryCount.count === 0) {
    const insertCategory = db.prepare(
      "INSERT INTO categories (name, image) VALUES (?, ?)"
    );
    insertCategory.run("Dam", null);
    insertCategory.run("Herr", null);
    insertCategory.run("Barn", null);
    console.log("âœ… Grundkategorier har lagts till");
  }

    // Grund spot-texts
  const spotCount = db.prepare("SELECT COUNT(*) as count FROM spot_texts").get();
  if (spotCount.count === 0) {
    const insertSpot = db.prepare("INSERT INTO spot_texts (spot_key, display_text) VALUES (?, ?)");
    insertSpot.run("women", "KVINNOR");
    insertSpot.run("men", "MÃ„N");
    insertSpot.run("kids", "BARN");
    console.log("âœ… Grund spot-texts har lagts till");
  }

  // STEG 4: LÃ¤gg till testprodukter om tabellen Ã¤r tom (din data)
  const productCount = db
    .prepare("SELECT COUNT(*) as count FROM products")
    .get();
  if (productCount.count === 0) {
    const insertProduct = db.prepare(`
      INSERT INTO products (id, name, price, brand, image, isNew, slug, description, sku, isFavorite, category_id) 
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    insertProduct.run(
      1,
      "Vit Skjorta",
      "299",
      "Levis",
      "/images/vit-skjorta.png",
      1,
      "Vit-Skjorta",
      "En vit skjorta i glatt material",
      "AAA111",
      1,
      1
    );
    insertProduct.run(
      2,
      "Svart Skjorta",
      "299",
      "Levis",
      "/images/svart-skjorta.png",
      1,
      "Svart-Skjorta",
      "Lorem ipsum dolor sit amet",
      "BBB111",
      0,
      1
    );
    insertProduct.run(
      3,
      "GrÃ¶n Skjorta",
      "299",
      "Levis",
      "/images/grÃ¶n-skjorta.png",
      0,
      "Gron-Skjorta",
      "Lorem ipsum dolor sit amet",
      "CCC111",
      0,
      2
    );
    insertProduct.run(
      4,
      "Vit KlÃ¤nning",
      "599",
      "Levis",
      "/images/vit-klÃ¤nning.png",
      0,
      "Vit-KlÃ¤nning",
      "Lorem ipsum dolor sit amet",
      "DDD111",
      0,
      1
    );
    insertProduct.run(
      5,
      "Svart KlÃ¤nning",
      "599",
      "Levis",
      "/images/svart-klÃ¤nning.png",
      0,
      "Svart-KlÃ¤nning",
      "Lorem ipsum dolor sit amet",
      "EEE111",
      0,
      1
    );
    insertProduct.run(
      6,
      "Svart Kjol",
      "399",
      "Levis",
      "/images/svart-kjol.png",
      0,
      "Svart-Kjol",
      "Lorem ipsum dolor sit amet",
      "FFF111",
      0,
      1
    );
    insertProduct.run(
      7,
      "Denim Kjol",
      "399",
      "Levis",
      "/images/denim-kjol.png",
      0,
      "Denim-Kjol",
      "Lorem ipsum dolor sit amet",
      "GGG111",
      0,
      2
    );
    insertProduct.run(
      8,
      "BlÃ¥ KlÃ¤nning",
      "599",
      "Levis",
      "/images/blÃ¥-klÃ¤nning.png",
      0,
      "Bla-Klanning",
      "Lorem ipsum dolor sit amet",
      "HHH111",
      0,
      3
    );

    console.log("âœ… Testprodukter har lagts till med kategori-relationer");
  }

  return db;
}

// sÃ¤kerstÃ¤ll att mappar finns
const ensureDir = (dir) => {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
};
ensureDir(path.join(__dirname, "public/images/products"));
ensureDir(path.join(__dirname, "public/images/categories"));

// enkel filtypskontroll
const imageFileFilter = (req, file, cb) => {
  if (/^image\//.test(file.mimetype)) cb(null, true);
  else cb(new Error("Only image uploads are allowed"), false);
};

// filnamn: tidsstÃ¤mpel + originalext
const filename = (req, file, cb) => {
  const ext = path.extname(file.originalname).toLowerCase();
  const base = path.basename(file.originalname, ext).replace(/\s+/g, "-");
  cb(null, `${Date.now()}-${base}${ext}`);
};

// separat storage fÃ¶r produkter och kategorier
const storageProducts = multer.diskStorage({
  destination: (req, file, cb) =>
    cb(null, path.join(__dirname, "public/images/products")),
  filename,
});
const storageCategories = multer.diskStorage({
  destination: (req, file, cb) =>
    cb(null, path.join(__dirname, "public/images/categories")),
  filename,
});

const uploadProductImage = multer({
  storage: storageProducts,
  fileFilter: imageFileFilter,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5 MB
});

const uploadCategoryImage = multer({
  storage: storageCategories,
  fileFilter: imageFileFilter,
  limits: { fileSize: 5 * 1024 * 1024 },
});

// Initiera databasen
const db = setupDb();

// Test-route fÃ¶r att se om servern fungerar
app.get("/", (req, res) => {
  res.send("Backend fungerar! ðŸš€");
});

// ===== FRONTEND API ROUTES =====

// HÃ¤mta alla produkter med kategorinamn (JOIN)
app.get("/products", (req, res) => {
  try {
    const products = db
      .prepare(
        `
      SELECT p.*, c.name as category_name 
      FROM products p 
      LEFT JOIN categories c ON p.category_id = c.id
    `
      )
      .all();
    res.json(products);
  } catch (error) {
    console.error("Fel vid hÃ¤mtning av produkter:", error);
    res.status(500).json({ error: "NÃ¥got gick fel med databasen" });
  }
});

// HÃ¤mta alla kategorier (fÃ¶r dynamisk meny)
app.get("/categories", (req, res) => {
  try {
    const categories = db
      .prepare("SELECT * FROM categories ORDER BY name")
      .all();
    res.json(categories);
  } catch (error) {
    console.error("Fel vid hÃ¤mtning av kategorier:", error);
    res.status(500).json({ error: "NÃ¥got gick fel med databasen" });
  }
});

// SÃ¶k efter produkter (fÃ¶r frontend sÃ¶kning)
app.get("/products/search", (req, res) => {
  const query = req.query.q?.toLowerCase();
  if (!query) {
    return res.status(400).json({ error: "Ingen sÃ¶kterm angiven" });
  }

  try {
    console.log("SÃ¶kterm:", query);
    const sql = `
      SELECT p.*, c.name as category_name 
      FROM products p 
      LEFT JOIN categories c ON p.category_id = c.id
      WHERE LOWER(p.name) LIKE ?
    `;
    const products = db.prepare(sql).all(`%${query}%`);
    res.json(products);
  } catch (error) {
    console.error("DB Error:", error);
    res.status(500).json({ error: "Fel vid hÃ¤mtning av produkter" });
  }
});

app.get("/api/spot-texts", (req, res) => {
  try {
    const rows = db
      .prepare("SELECT spot_key, display_text FROM spot_texts ORDER BY spot_key")
      .all();
    
    // Konvertera till objekt fÃ¶r enklare anvÃ¤ndning
    const textsObject = {};
    rows.forEach(row => {
      textsObject[row.spot_key] = row.display_text;
    });
    
    res.json(textsObject);
  } catch (error) {
    console.error("Fel vid hÃ¤mtning av spot texts:", error);
    res.status(500).json({ error: "NÃ¥got gick fel med spot texts" });
  }
});

// HÃ¤mta produkter via kategori
app.get("/products/category/:categoryId", (req, res) => {
  const { categoryId } = req.params;
  try {
    const products = db
      .prepare(
        `
      SELECT p.*, c.name as category_name 
      FROM products p 
      LEFT JOIN categories c ON p.category_id = c.id
      WHERE p.category_id = ?
    `
      )
      .all(categoryId);
    res.json(products);
  } catch (error) {
    console.error("Fel vid hÃ¤mtning av produkter fÃ¶r kategori:", error);
    res.status(500).json({ error: "NÃ¥got gick fel" });
  }
});

// HÃ¤mta liknande produkter (fÃ¶r SimilarProducts-komponenten)
app.get("/products/similar", (req, res) => {
  const productId = req.query.id;

  if (!productId) {
    return res.status(400).json({ error: "Missing product ID" });
  }

  try {
    const similarProducts = db
      .prepare(
        `
        SELECT p.*, c.name as category_name 
        FROM products p 
        LEFT JOIN categories c ON p.category_id = c.id
        WHERE p.id != ? LIMIT 3
      `
      )
      .all(productId);

    res.json(similarProducts);
  } catch (error) {
    console.error("Error fetching similar products:", error);
    res
      .status(500)
      .json({ error: "Something went wrong fetching similar products" });
  }
});

// HÃ¤mta produkt via slug (fÃ¶r ProductDetails)
app.get("/products/:slug", (req, res) => {
  const { slug } = req.params;
  try {
    console.log("HÃ¤mtar produkt med slug:", slug);

    const product = db
      .prepare(
        `
        SELECT p.*, c.name as category_name 
        FROM products p 
        LEFT JOIN categories c ON p.category_id = c.id
        WHERE p.slug = ?
      `
      )
      .get(slug);

    if (!product) {
      return res.status(404).json({ error: "Produkten hittades inte" });
    }

    res.json(product);
  } catch (error) {
    console.error("Fel vid hÃ¤mtning av produkt:", error);
    res.status(500).json({ error: "NÃ¥got gick fel vid hÃ¤mtning av produkt" });
  }
});

// HÃ¤mta alla kategorier (fÃ¶r dynamisk meny)
app.get("/categories", (req, res) => {
  try {
    const categories = db
      .prepare("SELECT * FROM categories ORDER BY name")
      .all();
    res.json(categories);
  } catch (error) {
    console.error("Fel vid hÃ¤mtning av kategorier:", error);
    res.status(500).json({ error: "NÃ¥got gick fel med databasen" });
  }
});

// ===== ADMIN API ROUTES =====

// HÃ¤mta alla produkter fÃ¶r admin med kategorinamn (JOIN)
app.get("/api/admin/products", (req, res) => {
  try {
    const rows = db
      .prepare(
        `
      SELECT p.*, c.name as category_name 
      FROM products p 
      LEFT JOIN categories c ON p.category_id = c.id
    `
      )
      .all();
    res.json(rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message });
  }
});

// LÃ¤gg till en ny produkt (admin) med kategori-relation
// LÃ¤gg till en ny produkt (admin) med kategori-relation + filuppladdning
app.post(
  "/api/admin/products",
  uploadProductImage.single("image"),
  (req, res) => {
    try {
      const { name, description, sku, price, brand, category_id } = req.body;

      if (!name || !sku || !price) {
        return res
          .status(400)
          .json({ error: "Alla fÃ¤lt (namn, sku, pris) mÃ¥ste vara ifyllda" });
      }

      // bygg bild-URL frÃ¥n uppladdad fil
      const imageUrl = req.file
        ? `/images/products/${req.file.filename}`
        : null;

      // generera slug
      const slug = name
        .toLowerCase()
        .replace(/Ã¥/g, "a")
        .replace(/Ã¤/g, "a")
        .replace(/Ã¶/g, "o")
        .replace(/[\s\W-]+/g, "-")
        .replace(/^-+|-+$/g, "");

      const stmt = db.prepare(`
        INSERT INTO products (name, description, sku, price, brand, image, slug, category_id) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `);

      const info = stmt.run(
        name,
        description,
        sku,
        price,
        brand,
        imageUrl,
        slug,
        category_id ? Number(category_id) : null
      );

      res.status(201).json({
        id: info.lastInsertRowid,
        name,
        description,
        sku,
        price,
        brand,
        image: imageUrl,
        slug,
        category_id,
      });
    } catch (err) {
      console.error("Databasfel:", err);
      return res.status(500).json({ error: "Kunde inte spara produkten" });
    }
  }
);

// ===== KATEGORI ADMIN API ROUTES =====

// HÃ¤mta alla kategorier fÃ¶r admin
app.get("/api/admin/categories", (req, res) => {
  try {
    const rows = db.prepare("SELECT * FROM categories ORDER BY name").all();
    res.json(rows);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message });
  }
});

// LÃ¤gg till en ny kategori (admin)
// LÃ¤gg till en ny kategori (admin) med bilduppladdning
app.post(
  "/api/admin/categories",
  uploadCategoryImage.single("image"),
  (req, res) => {
    try {
      const { name } = req.body;

      if (!name) {
        return res
          .status(400)
          .json({ error: "Kategorinamn mÃ¥ste vara ifyllt" });
      }

      // bygg bild-URL frÃ¥n uppladdad fil
      const imageUrl = req.file
        ? `/images/categories/${req.file.filename}`
        : null;

      const stmt = db.prepare(`
        INSERT INTO categories (name, image) 
        VALUES (?, ?)
      `);

      const info = stmt.run(name, imageUrl);

      res.status(201).json({
        id: info.lastInsertRowid,
        name,
        image: imageUrl,
      });
    } catch (err) {
      console.error("Databasfel:", err);
      return res.status(500).json({ error: "Kunde inte spara kategorin" });
    }
  }
);

// Starta servern
app.listen(port, () => {
  console.log(`Server kÃ¶rs pÃ¥ http://localhost:${port}`);
});
